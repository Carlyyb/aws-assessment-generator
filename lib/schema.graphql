enum Lang {
  en
  zh
}

enum Taxonomy {
  Knowledge
  Comprehension
  Application
  Analysis
  Synthesis
  Evaluation
}

enum AssessType {
  multiChoiceAssessment
  freeTextAssessment
  trueFalseAssessment
  singleChoiceAssessment
}

enum AssessStatus {
  IN_PROGRESS
  CREATED
  FAILED
  PUBLISHED
}

type Settings {
  uiLang: Lang
}

input UpsertSettingsInput {
  uiLang: Lang!
}

type Course {
  id: ID!
  name: String
  description: String
  createdBy: String
  createdAt: AWSDateTime
}

input CourseInput {
  id: ID
  name: String!
  description: String!
}

type Student {
  id: ID!
  firstName: String!
  lastName: String!
  email: String
  lastLoginAt: AWSDateTime
  assessmentCount: Int
  groups: [StudentGroup!]
}

type StudentGroup {
  id: ID!
  name: String!
  description: String
  color: String!
  createdBy: String!
  teachers: [String!]!
  students: [String!]!
  createdAt: AWSDateTime!
}

input StudentGroupInput {
  id: ID
  name: String!
  description: String
  color: String!
  teachers: [String!]
  students: [String!]
}

type AssessTemplate {
  id: ID!
  name: String
  docLang: Lang
  assessType: AssessType
  taxonomy: Taxonomy
  totalQuestions: Int
  easyQuestions: Int
  mediumQuestions: Int
  hardQuestions: Int
  createdBy: String
  createdAt: AWSDateTime
}

input AssessTemplateInput {
  name: String!
  docLang: Lang!
  assessType: AssessType!
  taxonomy: Taxonomy!
  totalQuestions: Int!
  easyQuestions: Int!
  mediumQuestions: Int!
  hardQuestions: Int!
}

type Rubric {
  weight: Int!
  point: String!
}

input RubricInput {
  weight: Int!
  point: String!
}

type FreeText {
  title: String!
  question: String!
  rubric: [Rubric!]!
}

input FreeTextInput {
  title: String!
  question: String!
  rubric: [RubricInput!]!
}

type MultiChoice {
  title: String
  question: String
  answerChoices: [String!]
  correctAnswer: Int
  explanation: String
}

type TrueFalse {
  title: String
  question: String
  answerChoices: [String!]
  correctAnswer: String
  explanation: String
}

type SingleChoice {
  title: String
  question: String
  answerChoices: [String!]
  correctAnswer: Int
  explanation: String
}

input MultiChoiceInput {
  title: String!
  question: String!
  answerChoices: [String]
  correctAnswer: Int
  explanation: String!
}

input TrueFalseInput {
  title: String!
  question: String!
  answerChoices: [String]
  correctAnswer: String
  explanation: String!
}

input SingleChoiceInput {
  title: String!
  question: String!
  answerChoices: [String]
  correctAnswer: Int
  explanation: String!
}

type Assessment {
  id: ID!
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  updatedAt: AWSDateTime!
  assessType: AssessType!
  multiChoiceAssessment: [MultiChoice!]
  freeTextAssessment: [FreeText!]
  trueFalseAssessment: [TrueFalse!]
  singleChoiceAssessment: [SingleChoice!]
  published: Boolean!
  status: AssessStatus!
  course: Course
  createdBy: String
  # 新增字段
  timeLimited: Boolean  # 是否限制测试用时
  timeLimit: Int        # 测试限制用时(minutes)
  allowAnswerChange: Boolean  # 提交答案后是否允许修改
  studentGroups: [String!]    # 发布给的学生分组
  courses: [String!]          # 对应的课程列表
  attemptLimit: Int           # 测试次数限制(-1表示无限次数)
  scoreMethod: String         # 成绩取最高分/平均分/最低分
}

input AssessmentInput {
  id: ID!
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  assessType: AssessType!
  multiChoiceAssessment: [MultiChoiceInput]
  freeTextAssessment: [FreeTextInput]
  trueFalseAssessment: [TrueFalseInput]
  singleChoiceAssessment: [SingleChoiceInput]
  published: Boolean
  status: AssessStatus!
  # 新增字段
  timeLimited: Boolean
  timeLimit: Int
  allowAnswerChange: Boolean
  studentGroups: [String!]
  courses: [String!]
  attemptLimit: Int
  scoreMethod: String
}

type StudentAssessment {
  parentAssessId: ID!
  assessment: Assessment
  answers: AWSJSON!
  completed: Boolean
  score: Int
  report: AWSJSON
  updatedAt: AWSDateTime
  # 新增字段
  attemptCount: Int       # 已测试次数
  duration: Int           # 测试用时(minutes)
  scores: [Int!]          # 测试分数列表
  remainingAttempts: Int  # 剩余测试次数(-1表示无限次数)
}

input StudentAssessmentInput {
  parentAssessId: ID!
  answers: AWSJSON!
  score: Int
  completed: Boolean
}

input GenerateAssessmentInput {
  name: String!
  courseId: String!
  lectureDate: AWSDate!
  deadline: AWSDate!
  locations: [String]
  assessTemplateId: String
  customPrompt: String
}

type KnowledgeBase {
  userId: String!
  courseId: String!
  indexName: String!
  knowledgeBaseId: String!
  kbDataSourceId: String!
  s3prefix: String!
  status: String!
}

type IngestionJob {
  ingestionJobId: ID!
  knowledgeBaseId: ID!
  dataSourceId: ID!
  status: String!
}

input IngestionJobInput {
  ingestionJobId: ID!
  knowledgeBaseId: ID!
  dataSourceId: ID!
}

type Mutation {
  upsertSettings(input: UpsertSettingsInput): Settings
  upsertCourse(input: CourseInput): Course
  deleteCourse(id: ID!): Boolean
  createAssessTemplate(input: AssessTemplateInput): AssessTemplate
  deleteAssessTemplate(id: ID!, userId: ID!): Boolean
  upsertAssessment(input: AssessmentInput): Assessment
  deleteAssessment(id: ID!): Boolean
  unpublishAssessment(assessmentId: ID!): Boolean
  upsertStudentAssessment(input: StudentAssessmentInput): StudentAssessment
  gradeStudentAssessment(input: StudentAssessmentInput): StudentAssessment
  createKnowledgeBase(courseId: ID, locations: [String]): IngestionJob
}

type Query {
  getSettings: Settings
  listCourses: [Course]
  listStudents: [Student]
  getAssessment(id: ID!): Assessment
  listAssessments: [Assessment]
  listAssessTemplates: [AssessTemplate]
  getStudentAssessment(parentAssessId: ID!): StudentAssessment
  listStudentAssessments: [StudentAssessment]
  listMyStudentAssessments(studentId: ID!): [StudentAssessment]
  publishAssessment(assessmentId: ID!): Boolean
  generateAssessment(input: GenerateAssessmentInput): ID
  getKnowledgeBase(courseId: ID): KnowledgeBase
  getIngestionJob(input: IngestionJobInput): IngestionJob
  
  # 管理员权限查询
  checkAdminPermissions: AdminPermissionResult
  
  # 日志系统查询
  queryLogs(input: LogQueryInput): LogQueryResult
}

# 日志查询输入
input LogQueryInput {
  operation: LogOperation!
  filters: LogFilters
  searchQuery: String
}

enum LogOperation {
  getLogs
  getMetrics
  getLogGroups
  searchLogs
  getSystemHealth
  getErrorDetail
  getServiceStats
  getRequestStats
}

input LogFilters {
  serviceName: String
  level: String
  userId: String
  startTime: String
  endTime: String
  timeRange: String
  limit: Int
  logId: String  # 用于获取错误详情
}

# 日志查询结果
union LogQueryResult = LogsResult | MetricsResult | LogGroupsResult | SystemHealthResult | ErrorDetailResult | ServiceStatsResult | RequestStatsResult

type LogsResult {
  logs: [LogEntry!]!
  nextToken: String
}

type MetricsResult {
  metrics: [SystemMetric!]!
}

type LogGroupsResult {
  logGroups: [LogGroup!]!
}

type SystemHealthResult {
  totalRequests: Int!
  errorRate: Float!
  averageResponseTime: Float!
  memoryUtilization: Float!
  topErrors: [ErrorSummary!]!
  serviceHealth: [ServiceHealth!]!
}

# 日志条目
type LogEntry {
  logId: ID!
  timestamp: String!
  message: String!
  level: String!
  serviceName: String
  userId: String
  requestId: String
  errorType: String
  stackTrace: String
  duration: Int
  memoryUsed: Int
  billedDuration: Int
}

# 系统指标
type SystemMetric {
  metricKey: String!
  timestamp: String!
  metricType: String!
  value: Float!
  dimensions: String! # JSON string
}

# 日志组
type LogGroup {
  name: String!
  status: String!
}

# 错误统计
type ErrorSummary {
  errorType: String!
  count: Int!
}

# 服务健康状态
type ServiceHealth {
  serviceName: String!
  status: String!
  errorCount: Int!
  requestCount: Int!
}

# 错误详情结果
type ErrorDetailResult {
  errorDetail: ErrorDetail
}

# 错误详情
type ErrorDetail {
  logId: ID!
  timestamp: String!
  serviceName: String!
  errorType: String!
  message: String!
  stackTrace: String
  requestId: String
  userId: String
  context: ErrorContext!
}

# 错误上下文
type ErrorContext {
  duration: Int
  memoryUsed: Int
  billedDuration: Int
  relatedRequests: [LogEntry!]
}

# 服务统计结果
type ServiceStatsResult {
  serviceStats: [ServiceStats!]!
}

# 服务统计
type ServiceStats {
  serviceName: String!
  requestCount: Int!
  errorCount: Int!
  avgDuration: Float!
  avgMemoryUsed: Float!
  errorRate: Float!
  lastActivity: String!
  peakMemory: Float!
  slowestRequest: Float!
}

# 请求统计结果
type RequestStatsResult {
  requestStats: [RequestStats!]!
}

# 请求统计
type RequestStats {
  serviceName: String!
  hourlyData: [HourlyStats!]!
}

# 小时统计
type HourlyStats {
  hour: String!
  requestCount: Int!
  errorCount: Int!
  avgDuration: Float!
  peakMemory: Float!
}

# 管理员权限结果
type AdminPermissionResult {
  userId: String!
  email: String!
  group: String!
  isAdmin: Boolean!
  adminLevel: String
  permissions: AdminPermissions!
}

# 管理员权限详情
type AdminPermissions {
  canAccessLogManagement: Boolean!
  canManageUsers: Boolean!
  canManageSystem: Boolean!
}
